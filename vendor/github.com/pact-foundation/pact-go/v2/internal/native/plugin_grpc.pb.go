// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pact_plugin.proto

package native

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PactPluginClient is the client API for PactPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PactPluginClient interface {
	// Check that the plugin loaded OK. Returns the catalogue entries describing what the plugin provides
	InitPlugin(ctx context.Context, in *InitPluginRequest, opts ...grpc.CallOption) (*InitPluginResponse, error)
	// Updated catalogue. This will be sent when the core catalogue has been updated (probably by a plugin loading).
	UpdateCatalogue(ctx context.Context, in *Catalogue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Request to perform a comparison of some contents (matching request)
	CompareContents(ctx context.Context, in *CompareContentsRequest, opts ...grpc.CallOption) (*CompareContentsResponse, error)
	// Request to configure/setup the interaction for later verification. Data returned will be persisted in the pact file.
	ConfigureInteraction(ctx context.Context, in *ConfigureInteractionRequest, opts ...grpc.CallOption) (*ConfigureInteractionResponse, error)
	// Request to generate the content using any defined generators
	GenerateContent(ctx context.Context, in *GenerateContentRequest, opts ...grpc.CallOption) (*GenerateContentResponse, error)
}

type pactPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPactPluginClient(cc grpc.ClientConnInterface) PactPluginClient {
	return &pactPluginClient{cc}
}

func (c *pactPluginClient) InitPlugin(ctx context.Context, in *InitPluginRequest, opts ...grpc.CallOption) (*InitPluginResponse, error) {
	out := new(InitPluginResponse)
	err := c.cc.Invoke(ctx, "/io.pact.plugin.PactPlugin/InitPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pactPluginClient) UpdateCatalogue(ctx context.Context, in *Catalogue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.pact.plugin.PactPlugin/UpdateCatalogue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pactPluginClient) CompareContents(ctx context.Context, in *CompareContentsRequest, opts ...grpc.CallOption) (*CompareContentsResponse, error) {
	out := new(CompareContentsResponse)
	err := c.cc.Invoke(ctx, "/io.pact.plugin.PactPlugin/CompareContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pactPluginClient) ConfigureInteraction(ctx context.Context, in *ConfigureInteractionRequest, opts ...grpc.CallOption) (*ConfigureInteractionResponse, error) {
	out := new(ConfigureInteractionResponse)
	err := c.cc.Invoke(ctx, "/io.pact.plugin.PactPlugin/ConfigureInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pactPluginClient) GenerateContent(ctx context.Context, in *GenerateContentRequest, opts ...grpc.CallOption) (*GenerateContentResponse, error) {
	out := new(GenerateContentResponse)
	err := c.cc.Invoke(ctx, "/io.pact.plugin.PactPlugin/GenerateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PactPluginServer is the server API for PactPlugin service.
// All implementations must embed UnimplementedPactPluginServer
// for forward compatibility
type PactPluginServer interface {
	// Check that the plugin loaded OK. Returns the catalogue entries describing what the plugin provides
	InitPlugin(context.Context, *InitPluginRequest) (*InitPluginResponse, error)
	// Updated catalogue. This will be sent when the core catalogue has been updated (probably by a plugin loading).
	UpdateCatalogue(context.Context, *Catalogue) (*emptypb.Empty, error)
	// Request to perform a comparison of some contents (matching request)
	CompareContents(context.Context, *CompareContentsRequest) (*CompareContentsResponse, error)
	// Request to configure/setup the interaction for later verification. Data returned will be persisted in the pact file.
	ConfigureInteraction(context.Context, *ConfigureInteractionRequest) (*ConfigureInteractionResponse, error)
	// Request to generate the content using any defined generators
	GenerateContent(context.Context, *GenerateContentRequest) (*GenerateContentResponse, error)
	mustEmbedUnimplementedPactPluginServer()
}

// UnimplementedPactPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPactPluginServer struct {
}

func (UnimplementedPactPluginServer) InitPlugin(context.Context, *InitPluginRequest) (*InitPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPlugin not implemented")
}
func (UnimplementedPactPluginServer) UpdateCatalogue(context.Context, *Catalogue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalogue not implemented")
}
func (UnimplementedPactPluginServer) CompareContents(context.Context, *CompareContentsRequest) (*CompareContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareContents not implemented")
}
func (UnimplementedPactPluginServer) ConfigureInteraction(context.Context, *ConfigureInteractionRequest) (*ConfigureInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureInteraction not implemented")
}
func (UnimplementedPactPluginServer) GenerateContent(context.Context, *GenerateContentRequest) (*GenerateContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateContent not implemented")
}
func (UnimplementedPactPluginServer) mustEmbedUnimplementedPactPluginServer() {}

// UnsafePactPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PactPluginServer will
// result in compilation errors.
type UnsafePactPluginServer interface {
	mustEmbedUnimplementedPactPluginServer()
}

func RegisterPactPluginServer(s grpc.ServiceRegistrar, srv PactPluginServer) {
	s.RegisterService(&PactPlugin_ServiceDesc, srv)
}

func _PactPlugin_InitPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PactPluginServer).InitPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pact.plugin.PactPlugin/InitPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PactPluginServer).InitPlugin(ctx, req.(*InitPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PactPlugin_UpdateCatalogue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalogue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PactPluginServer).UpdateCatalogue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pact.plugin.PactPlugin/UpdateCatalogue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PactPluginServer).UpdateCatalogue(ctx, req.(*Catalogue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PactPlugin_CompareContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PactPluginServer).CompareContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pact.plugin.PactPlugin/CompareContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PactPluginServer).CompareContents(ctx, req.(*CompareContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PactPlugin_ConfigureInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PactPluginServer).ConfigureInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pact.plugin.PactPlugin/ConfigureInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PactPluginServer).ConfigureInteraction(ctx, req.(*ConfigureInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PactPlugin_GenerateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PactPluginServer).GenerateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.pact.plugin.PactPlugin/GenerateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PactPluginServer).GenerateContent(ctx, req.(*GenerateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PactPlugin_ServiceDesc is the grpc.ServiceDesc for PactPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PactPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.pact.plugin.PactPlugin",
	HandlerType: (*PactPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitPlugin",
			Handler:    _PactPlugin_InitPlugin_Handler,
		},
		{
			MethodName: "UpdateCatalogue",
			Handler:    _PactPlugin_UpdateCatalogue_Handler,
		},
		{
			MethodName: "CompareContents",
			Handler:    _PactPlugin_CompareContents_Handler,
		},
		{
			MethodName: "ConfigureInteraction",
			Handler:    _PactPlugin_ConfigureInteraction_Handler,
		},
		{
			MethodName: "GenerateContent",
			Handler:    _PactPlugin_GenerateContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pact_plugin.proto",
}
